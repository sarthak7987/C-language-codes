#include <stdio.h>
#include <limits.h>


double findMedianSortedArrays(int arr1[], int m, int arr2[], int n) {
 
    if (m > n)
        return findMedianSortedArrays(arr2, n, arr1, m);

    int low = 0, high = m, medianPos = (m + n + 1) / 2;
    while (low <= high) {
        int partition1 = (low + high) / 2;
        int partition2 = medianPos - partition1;

        int maxLeft1 = (partition1 == 0) ? INT_MIN : arr1[partition1 - 1];
        int minRight1 = (partition1 == m) ? INT_MAX : arr1[partition1];

        int maxLeft2 = (partition2 == 0) ? INT_MIN : arr2[partition2 - 1];
        int minRight2 = (partition2 == n) ? INT_MAX : arr2[partition2];

        
        if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
            if ((m + n) % 2 == 0) {
                return (double)(fmax(maxLeft1, maxLeft2) + fmin(minRight1, minRight2)) / 2.0;
            } else {
                return (double)fmax(maxLeft1, maxLeft2);
            }
        } else if (maxLeft1 > minRight2) {
            high = partition1 - 1; 
        } else {
            low = partition1 + 1; 
        }
    }

    return -1;
}

int main() {
    int m, n;

    printf("Enter the size of the first sorted array: ");
    scanf("%d", &m);
    int arr1[m];
    printf("Enter the elements of the first sorted array: ");
    for (int i = 0; i < m; i++) {
        scanf("%d", &arr1[i]);
    }

    printf("Enter the size of the second sorted array: ");
    scanf("%d", &n);
    int arr2[n];
    printf("Enter the elements of the second sorted array: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr2[i]);
    }

    double median = findMedianSortedArrays(arr1, m, arr2, n);
    printf("The median of the two sorted arrays is: %.2f\n", median);

    return 0;
}
